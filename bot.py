import json
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.session.aiohttp import AiohttpSession
import asyncio

# ------------------------------------------------------------
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ------------------------------------------------------------
BOT_TOKEN = "8248066160:AAFFs98RKdSLYoCH9-RtbZi-QD0oERf9tcM"   # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
ADMIN_ID = 1986051958            # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID

# ------------------------------------------------------------
# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ------------------------------------------------------------
logging.basicConfig(level=logging.INFO)

# ------------------------------------------------------------
# üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ------------------------------------------------------------
session = AiohttpSession()
bot = Bot(token=BOT_TOKEN, session=session, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# ------------------------------------------------------------
# üè™ –ö–æ–º–∞–Ω–¥–∞ /start
# ------------------------------------------------------------
@dp.message(CommandStart())
async def start(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App"""
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
            web_app=WebAppInfo(url="https://shop-mini-app-eight.vercel.app/mini_app")
        )]
    ])
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Å–≤–µ—á–µ–π üïØÔ∏è\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Mini App.",
        reply_markup=kb
    )

# ------------------------------------------------------------
# üßæ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App
# ------------------------------------------------------------
@dp.message(lambda m: m.web_app_data is not None)
async def handle_webapp_data(message: types.Message):
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑ Mini App (tg.sendData)"""
    try:
        data = json.loads(message.web_app_data.data)
        product = data.get("product", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        qty = data.get("quantity", 1)
        comment = data.get("comment", "")
        username = data.get("username") or "‚Äî"
        user_id = data.get("user_id") or message.from_user.id

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_text = (
            f"<b>üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–∑ Mini App</b>\n\n"
            f"<b>–¢–æ–≤–∞—Ä:</b> {product}\n"
            f"<b>–ö–æ–ª-–≤–æ:</b> {qty}\n"
            f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment or '‚Äî'}\n\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{username}\n"
            f"<b>ID:</b> <code>{user_id}</code>"
        )
        await bot.send_message(ADMIN_ID, admin_text)

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n\n"
            f"–¢–æ–≤–∞—Ä: <b>{product}</b>\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{qty}</b>\n"
            f"–ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è üí¨"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Mini App: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# ------------------------------------------------------------
# üöÄ –ó–∞–ø—É—Å–∫
# ------------------------------------------------------------
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
